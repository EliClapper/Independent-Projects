---
title: "Competitive Coding Practice Problems"
author: "Kevin Patyk"
date: "11/8/2021"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

# Competitive Coding Practice Problems from CodeChef

-----

# 1 - ATM

Pooja would like to withdraw X USD from an ATM. The cash machine will only accept the transaction if X is a multiple of 5, and Pooja's account balance has enough cash to perform the withdrawal transaction (including bank charges). For each successful withdrawal the bank charges 0.50 $US. Calculate Pooja's account balance after an attempted transaction.

* Input: Positive integer 0 < X <= 2000 - the amount of cash which Pooja wishes to withdraw. Nonnegative number 0<= Y <= 2000 with two digits of precision - Pooja's initial account balance. 

* Output: Output the account balance after the attempted transaction, given as a number with two digits of precision. If there is not enough money in the account to complete the transaction, output the current bank balance.
```{r}
atm <- function(x, y){
  if(x %% 5 == 0){
    withdrawal <- y - x
    final <- round(withdrawal - 0.50, 2)
  } else {
    stop("x must be a multiple of 5")
  }
  if (x > y){
    stop(paste("Insufficient funds for withdrawal. You only have", y, "but you requested", x))
  }
  balance <- paste("Your remaining balance is:", y - final)
  return(list("Withdrawal Amount" = final, "Balance" = balance))
}

atm(x = 100, y = 120)
```

# 2 - Add Two Numbers

Shivam is the youngest programmer in the world, he is just 12 years old. Shivam is learning programming and today he is writing his first program.

The task is very simple: given two integers A and B, write a program to add these two numbers and output it.

* Input: The first line contains an integer T, the total number of test cases. Then follow T lines, each line contains two Integers A and B.

* Output: For each test case, add A and B and display the sum in a new line.

* Constraints: 1 ≤ T ≤ 1000, 0 ≤ A,B ≤ 10000
```{r}
addnums <- function(len_t, a, b){
  stopifnot(len_t > 0, len_t < 1000, a > 0, b > 0, a < 10000, b < 10000)
  stor <- list()[1:len_t]
  for(i in 1:len_t){
    stor[[i]] <- a[i] + b[i]
  }
  return(stor)
}

addnums(len_t = 3, a = c(1,2,3), b = c(1,2,3))
```

# 3 - Number Mirror

Write a program that accepts a number, n, and outputs the same.

* Input: The only line contains a single integer.

* Output: Output the answer in a single line.

* Constraints: 0 ≤ n ≤ 105
```{r}
mirror <- function(n){
  stopifnot(length(n) == 1)
  if(n < 0 | n > 10^5){
    stop("n is not within the constraints") 
  }  else {
    print(n)
  }
}

mirror(n = 1)
```

# 4 - Sum of Digits

You're given an integer N. Write a program to calculate the sum of all the digits of N.

* Input: The first line contains an integer T, the total number of testcases. Then follow T lines, each line contains an integer N.

* Output: For each test case, calculate the sum of digits of N, and display it in a new line.

* Constraints: 1 ≤ T ≤ 1000, 1 ≤ N ≤ 1000000

Here we are using: `sum(as.numeric(strsplit(x = as.character(n), split = "")[[1]]))`. This code will:

* First, it will coerce the number vector into a character vector.
* Then, it will split the character vector into separate parts. This will turn it into a list. 
* Then, it will subset the list using the first index, which will give us the numbers as splits characters.
* Finally, the numbers will be coerced into a numeric type and summed. 
```{r}
sumdigits <- function(len_t, n){
  stopifnot(len_t > 0, len_t < 1000, n > 0, n < 1000000)
  x <- lapply(X = n, FUN = function(x) sum(as.numeric(strsplit(x = as.character(n), split = "")[[1]])))
  print(x)
}

sumdigits(len_t = 3, n = c(123,123,123))

#using for loop instead of lapply()
sumdigits_for <- function(len_t, n){
  stopifnot(len_t > 0, len_t < 1000, n > 0, n < 1000000)
  stor <- list()[1:len_t]
  for(i in 1:len_t){ 
    stor[[i]] <- sum(as.numeric(strsplit(x = as.character(n[i]), split = "")[[1]]))
  }
  return(stor)
}

sumdigits_for(len_t = 3, n = c(123,123,123))
```

# 5 - Find Remainder

Write a program to find the remainder when an integer A is divided by an integer B.

* Input: The first line contains an integer T, the total number of test cases. Then T lines follow, each line contains two Integers A and B.

* Output: For each test case, find the remainder when A is divided by B, and display it in a new line.

* Constraints: 1 ≤ T ≤ 1000, 1 ≤ A,B ≤ 10000
```{r}
remainder <- function(len_t, a, b){
  stopifnot(len_t > 0, len_t < 1000, a > 0, b > 0, a < 10000, b < 10000)
  stor <- list(1:len_t)
  for(i in 1:len_t){
    stor[[i]] <- a[i] %% b[i]
  }
  return(stor)
}

remainder(len_t = 3, a = c(10,5,3), b = c(6,4,2))
```

# 6 - First and Last Digit 

If Give an integer N . Write a program to obtain the sum of the first and last digits of this number.

* Input: The first line contains an integer T, the total number of test cases. Then follow T lines, each line contains an integer N.

* Output: For each test case, display the sum of first and last digits of N in a new line.

* Constraints: 1 ≤ T ≤ 1000, 1 ≤ N ≤ 1000000
```{r}

```

