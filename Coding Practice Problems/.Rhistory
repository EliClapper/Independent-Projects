knitr::opts_chunk$set(echo = TRUE)
atm <- function(x, y){
if(x %% 5 == 0){
withdrawal <- y - x
final <- round(withdrawal - 0.50, 2)
} else {
stop("x must be a multiple of 5")
}
if (x > y){
stop(paste("Insufficient funds for withdrawal. You only have", y, "but you requested", x))
}
balance <- paste("Your remaining balance is:", y - final)
return(list("Withdrawal Amount" = final, "Balance" = balance))
}
ATM(x = 125, y = 120)
atm(x = 125, y = 120)
atm(x = 100, y = 120)
addnums <- function(len_t, a, b){
stopifnot(len_t > 0, len_t < 1000, a > 0, b > 0, a < 10000, b < 10000)
stor <- list()[1:len_t]
for(i in 1:len_t){
stor[[i]] <- a[i] + b[i]
}
return(stor)
}
addnums(len_t = 3, a = c(1,2,3), b = c(1,2,3))
mirror <- function(n){
stopifnot(length(n) == 1)
if(n < 0 | n > 10^5){
stop("n is not within the constraints")
}  else {
print(n)
}
}
mirror(n = 1)
sumdigits <- function(x){
x <- lapply(X = as.list(x), FUN = function(x) sum(as.numeric(strsplit(x = as.character(x), split = "")[[1]])))
print(x)
}
sumdigits(x = c(123,123,123))
#using for loop instead of lapply()
sumdigits_for <- function(x){
stor <- list()
for(i in 1:length(x)){
stor[[i]] <- sum(as.numeric(strsplit(x = as.character(x[i]), split = "")[[1]]))
}
return(stor)
}
sumdigits_for(x = c(123,123,123))
sumdigits <- function(n){
stopifnot(len_t > 0, len_t < 1000, n < 0, n > 1000000)
x <- lapply(X = as.list(n), FUN = function(x) sum(as.numeric(strsplit(x = as.character(n), split = "")[[1]])))
print(x)
}
sumdigits(x = c(123,123,123))
sumdigits <- function(n){
stopifnot(len_t > 0, len_t < 1000, n < 0, n > 1000000)
x <- lapply(X = as.list(n), FUN = function(x) sum(as.numeric(strsplit(x = as.character(n), split = "")[[1]])))
print(x)
}
sumdigits(n = c(123,123,123))
sumdigits <- function(len_t, n){
stopifnot(len_t > 0, len_t < 1000, n > 0, n < 1000000)
x <- lapply(X = as.list(n)[1:len_t], FUN = function(x) sum(as.numeric(strsplit(x = as.character(n), split = "")[[1]])))
print(x)
}
sumdigits(n = c(123,123,123))
sumdigits(len_t = 3, n = c(123,123,123))
#using for loop instead of lapply()
sumdigits_for <- function(len_t, n){
stopifnot(len_t > 0, len_t < 1000, n > 0, n < 1000000)
stor <- list()
for(i in 1:length(len_t)){
stor[[i]] <- sum(as.numeric(strsplit(x = as.character(n[i]), split = "")[[1]]))
}
return(stor)
}
sumdigits_for(n = c(123,123,123))
sumdigits_for(len_t = 3, n = c(123,123,123))
#using for loop instead of lapply()
sumdigits_for <- function(len_t, n){
stopifnot(len_t > 0, len_t < 1000, n > 0, n < 1000000)
stor <- list()[1:len_t]
for(i in 1:length(len_t)){
stor[[i]] <- sum(as.numeric(strsplit(x = as.character(n[i]), split = "")[[1]]))
}
return(stor)
}
sumdigits_for(len_t = 3, n = c(123,123,123))
#using for loop instead of lapply()
sumdigits_for <- function(len_t, n){
stopifnot(len_t > 0, len_t < 1000, n > 0, n < 1000000)
stor <- list()
for(i in 1:length(len_t)){
stor[[i]] <- sum(as.numeric(strsplit(x = as.character(n[i]), split = "")[[1]]))
}
return(stor)
}
sumdigits_for(len_t = 3, n = c(123,123,123))
sumdigits <- function(len_t, n){
stopifnot(len_t > 0, len_t < 1000, n > 0, n < 1000000)
x <- lapply(X = as.list(n)[1:len_t], FUN = function(x) sum(as.numeric(strsplit(x = as.character(n), split = "")[[1]])))
print(x)
}
sumdigits(len_t = 3, n = c(123,123,123))
sumdigits <- function(len_t, n){
stopifnot(len_t > 0, len_t < 1000, n > 0, n < 1000000)
x <- lapply(X = as.list(n), FUN = function(x) sum(as.numeric(strsplit(x = as.character(n), split = "")[[1]])))
print(x)
}
sumdigits(len_t = 3, n = c(123,123,123))
stor <- list(1:len_T)
stpr <- list()[1:3]
stor <- stpr
stpr
stor
rm(stpr)
stor
n = c(123,123,123)
sum(as.numeric(strsplit(x = as.character(n[1]), split = "")[[1]]))
sum(as.numeric(strsplit(x = as.character(n[2]), split = "")[[1]]))
sum(as.numeric(strsplit(x = as.character(n[3]), split = "")[[1]]))
#using for loop instead of lapply()
sumdigits_for <- function(len_t, n){
stopifnot(len_t > 0, len_t < 1000, n > 0, n < 1000000)
stor <- list()[1:len_t]
for(i in 1:length(len_t)){
stor[[i]] <- sum(as.numeric(strsplit(x = as.character(n[i]), split = "")[[1]]))
}
return(stor)
}
sumdigits_for(len_t = 3, n = c(123,123,123))
#using for loop instead of lapply()
sumdigits_for <- function(len_t, n){
stopifnot(len_t > 0, len_t < 1000, n > 0, n < 1000000)
stor <- list()
for(i in 1:length(len_t)){
stor[[i]] <- sum(as.numeric(strsplit(x = as.character(n[i]), split = "")[[1]]))
}
return(stor)
}
sumdigits_for(len_t = 3, n = c(123,123,123))
#using for loop instead of lapply()
sumdigits_for <- function(len_t, n){
stopifnot(len_t > 0, len_t < 1000, n > 0, n < 1000000)
for(i in 1:length(len_t)){
stor[[i]] <- sum(as.numeric(strsplit(x = as.character(n[i]), split = "")[[1]]))
}
return(stor)
}
sumdigits_for(len_t = 3, n = c(123,123,123))
stor <- list()[1:len_t]
stor[[i]]
stor[[1]]
stor[[2]]
stor[[3]]
#using for loop instead of lapply()
sumdigits_for <- function(len_t, n){
stopifnot(len_t > 0, len_t < 1000, n > 0, n < 1000000)
stor <- list()[1:len_t]
for(i in 1:length(len_t)){
stor[[i]] <- sum(as.numeric(strsplit(x = as.character(n[i]), split = "")[[1]]))
}
return(stor)
}
sumdigits_for(len_t = 3, n = c(123,123,123))
#using for loop instead of lapply()
sumdigits_for <- function(len_t, n){
stopifnot(len_t > 0, len_t < 1000, n > 0, n < 1000000)
stor <- list()[1:n]
for(i in 1:length(len_t)){
stor[[i]] <- sum(as.numeric(strsplit(x = as.character(n[i]), split = "")[[1]]))
}
return(stor)
}
sumdigits_for(len_t = 3, n = c(123,123,123))
#using for loop instead of lapply()
sumdigits_for <- function(len_t, n){
stopifnot(len_t > 0, len_t < 1000, n > 0, n < 1000000)
stor <- list()[1:len_t]
for(i in 1:length(n)){
stor[[i]] <- sum(as.numeric(strsplit(x = as.character(n[i]), split = "")[[1]]))
}
return(stor)
}
sumdigits_for(len_t = 3, n = c(123,123,123))
sumdigits_for(len_t = 4, n = c(123,123,123, 123))
length(c(123,123,123))
sumdigits_for(len_t = 3, n = c(123,123,123))
#using for loop instead of lapply()
sumdigits_for <- function(len_t, n){
stopifnot(len_t > 0, len_t < 1000, n > 0, n < 1000000)
stor <- list()[1:len_t]
for(i in 1:len_t){
stor[[i]] <- sum(as.numeric(strsplit(x = as.character(n[i]), split = "")[[1]]))
}
return(stor)
}
sumdigits_for(len_t = 3, n = c(123,123,123))
rm(list=ls())
n = c(123,123,123)
sum(as.numeric(strsplit(x = as.character(n), split = "")[[1]]))
sum(as.numeric(strsplit(x = as.character(n[1]), split = "")[[1]]))
sum(as.numeric(strsplit(x = as.character(n), split = "")[[1]]))
n
as.list(n)
strsplit(x = as.character(n), split = "")
lapply(X = as.list(n), FUN = function(x) sum(as.numeric(strsplit(x = as.character(n), split = "")[[1]])))
lapply(X = n, FUN = function(x) sum(as.numeric(strsplit(x = as.character(n), split = "")[[1]])))
strsplit(x = as.character(n), split = "")
sum(as.numeric(strsplit(x = as.character(n), split = "")
sum(as.numeric(strsplit(x = as.character(n), split = "")
sum(as.numeric(strsplit(x = as.character(n), split = "")))
sum(as.numeric(strsplit(x = as.character(n), split = "")))[[1]]
sum(as.numeric(strsplit(x = as.character(n), split = "")[[1]]))
sum(as.numeric(strsplit(x = as.character(n), split = "")[[2]]))
sum(as.numeric(strsplit(x = as.character(n), split = "")[[3]]))
n[1]
n[2]
n[3]
n
lapply(X = n, FUN = function(x) sum(as.numeric(strsplit(x = as.character(n), split = "")[[1]])))
sum(as.numeric(strsplit(x = as.character(n), split = "")[[1]]))
sum(as.numeric(strsplit(x = as.character(n[1]), split = "")[[1]]))
sum(as.numeric(strsplit(x = as.character(n), split = "")[[1]]))
rm(list=ls())
knitr::opts_chunk$set(echo = TRUE)
atm <- function(x, y){
if(x %% 5 == 0){
withdrawal <- y - x
final <- round(withdrawal - 0.50, 2)
} else {
stop("x must be a multiple of 5")
}
if (x > y){
stop(paste("Insufficient funds for withdrawal. You only have", y, "but you requested", x))
}
balance <- paste("Your remaining balance is:", y - final)
return(list("Withdrawal Amount" = final, "Balance" = balance))
}
atm(x = 100, y = 120)
addnums <- function(len_t, a, b){
stopifnot(len_t > 0, len_t < 1000, a > 0, b > 0, a < 10000, b < 10000)
stor <- list()[1:len_t]
for(i in 1:len_t){
stor[[i]] <- a[i] + b[i]
}
return(stor)
}
addnums(len_t = 3, a = c(1,2,3), b = c(1,2,3))
mirror <- function(n){
stopifnot(length(n) == 1)
if(n < 0 | n > 10^5){
stop("n is not within the constraints")
}  else {
print(n)
}
}
mirror(n = 1)
sumdigits <- function(len_t, n){
stopifnot(len_t > 0, len_t < 1000, n > 0, n < 1000000)
x <- lapply(X = n, FUN = function(x) sum(as.numeric(strsplit(x = as.character(n), split = "")[[1]])))
print(x)
}
sumdigits(len_t = 3, n = c(123,123,123))
#using for loop instead of lapply()
sumdigits_for <- function(len_t, n){
stopifnot(len_t > 0, len_t < 1000, n > 0, n < 1000000)
stor <- list()[1:len_t]
for(i in 1:len_t){
stor[[i]] <- sum(as.numeric(strsplit(x = as.character(n[i]), split = "")[[1]]))
}
return(stor)
}
sumdigits_for(len_t = 3, n = c(123,123,123))
remainder <- function(len_t, a, b){
stopifnot(len_t > 0, len_t < 1000, a > 0, b > 0, a < 10000, b < 10000)
stor <- list(1:len_t)
for(i in 1:len_t){
stor[[i]] <- a[i] %% b[i]
}
return(stor)
}
remainder(len_t = 3, a = c(10,5,3), b = c(6,4,2))
